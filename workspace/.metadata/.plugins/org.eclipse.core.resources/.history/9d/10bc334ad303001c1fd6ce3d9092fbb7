package com.bosch.codegen.test

import java.io.BufferedWriter
import java.io.File
import java.io.FileWriter
import metamodel.ClassElement
import metamodel.Model

class CodeGen {
	
	def writeSingeTestFile(Object obj, String outputDirectory){
		writeContent(outputDirectory+File.separator+"cpp.test", main(obj).toString);
	}
	
	protected def void writeContent(String filePath, String content) {
		val BufferedWriter bw=new BufferedWriter(new FileWriter(new File(filePath)));
		
		bw.write(content)
		
		bw.close
		
	}
	
	
	def writeMultipleTestFile(Object obj, String outputDirectory){
		
			if( obj instanceof Model){
				for(classObj: obj.classesList){
					writeContent(outputDirectory+File.separator+classObj.name+"_cpp.test",generateClassContent(classObj).toString)
				}
			}
	
		}
	
	
	def main(Object obj)'''
	
	«IF obj instanceof Model»
	
	«FOR  classObj: (obj as Model).classesList»
	
		«generateClassContent(classObj)»	
	
	«ENDFOR »
	
	«ENDIF»
	
	'''
	
	protected def CharSequence generateClassContent(ClassElement classObj)
		'''
		
		//This file is generated by Meer
		
		#include "gtest/gtest.h"
		
		 
		/********** MEMBER FUNCTION DETAILS *******************/
			«FOR memberFunction : classObj.memberFunctions»
				 TEST(test«memberFunction.name», «memberFunction.name»__«classObj.name»)
				 {
				     EXPECT_EQ(true, foo());	
				 }
		«ENDFOR»'''
	
}